// #include <bluetoothServer.h>
// 
// //--------------------------------------------------------------------------------------------------
// //	BluetoothServerPrivate
// //--------------------------------------------------------------------------------------------------
// 
// class BluetoothServerPrivate
// {
// public:
// 
// 	Q_DECLARE_PUBLIC(BluetoothServer);
// 
// 	BluetoothServerPrivate() = default;
// 	virtual ~BluetoothServerPrivate() = default;
// 	
// protected:
// 
// 	BluetoothServer * q_ptr;
// 
// };
// 
// //--------------------------------------------------------------------------------------------------
// //	BluetoothServer (public ) []
// //--------------------------------------------------------------------------------------------------
// BluetoothServer::BluetoothServer(Protocol serverType /*= Protocol::RFCOMM*/, QObject* parent /*= nullptr*/)
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	~BluetoothServer (public ) []
// //--------------------------------------------------------------------------------------------------
// BluetoothServer::~BluetoothServer()
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	close (public ) []
// //--------------------------------------------------------------------------------------------------
// void BluetoothServer::close()
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	error (public ) []
// //--------------------------------------------------------------------------------------------------
// BluetoothServer::Error BluetoothServer::error() const
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	hasPendingConnections (public ) []
// //--------------------------------------------------------------------------------------------------
// bool BluetoothServer::hasPendingConnections() const
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	isListening (public ) []
// //--------------------------------------------------------------------------------------------------
// bool BluetoothServer::isListening() const
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	listen (public ) []
// //--------------------------------------------------------------------------------------------------
// bool BluetoothServer::listen(const BluetoothAddress& address /*= BluetoothAddress()*/, quint16 port /*= 0*/)
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	maxPendingConnections (public ) []
// //--------------------------------------------------------------------------------------------------
// int BluetoothServer::maxPendingConnections() const
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	nextPendingConnection (public ) []
// //--------------------------------------------------------------------------------------------------
// std::unique_ptr<BluetoothSocket> BluetoothServer::nextPendingConnection()
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	securityFlags (public ) []
// //--------------------------------------------------------------------------------------------------
// SecurityFlags BluetoothServer::securityFlags() const
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	serverAddress (public ) []
// //--------------------------------------------------------------------------------------------------
// BluetoothAddress BluetoothServer::serverAddress() const
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	serverPort (public ) []
// //--------------------------------------------------------------------------------------------------
// quint16 BluetoothServer::serverPort() const
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	serverType (public ) []
// //--------------------------------------------------------------------------------------------------
// Protocol BluetoothServer::serverType() const
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	setMaxPendingConnections (public ) []
// //--------------------------------------------------------------------------------------------------
// void BluetoothServer::setMaxPendingConnections(int numConnections)
// {
// 
// }
// 
// //--------------------------------------------------------------------------------------------------
// //	setSecurityFlags (public ) []
// //--------------------------------------------------------------------------------------------------
// void BluetoothServer::setSecurityFlags(SecurityFlags security)
// {
// 
// }
// 
